import os
import logging
from datetime import datetime
import re
from io import BytesIO
import signal
import sys

import telebot
from telebot import types
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from PIL import Image, ImageDraw, ImageFont
import qrcode
from reportlab.lib.pagesizes import A4, landscape
from reportlab.pdfgen import canvas
from reportlab.pdfbase import pdfmetrics
from reportlab.pdfbase.ttfonts import TTFont
from reportlab.lib.utils import ImageReader
from dotenv import load_dotenv
import yadisk

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
def signal_handler(sig, frame):
    logger.info("Bot shutdown gracefully")
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.FileHandler('bot.log'), logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN')
SPREADSHEET_NAME = os.getenv('SPREADSHEET_NAME')
MASTER_ID = int(os.getenv('MASTER_ID'))
MASTER_PHONE = os.getenv('MASTER_PHONE')
YANDEX_DISK_TOKEN = os.getenv('YANDEX_DISK_TOKEN')
YANDEX_DISK_FOLDER = os.getenv('YANDEX_DISK_FOLDER')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN, threaded=False)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Google Sheets
try:
    gs_scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', gs_scope)
    client = gspread.authorize(creds)
    spreadsheet = client.open(SPREADSHEET_NAME)
    sheet = spreadsheet.sheet1
    SPREADSHEET_URL = spreadsheet.url
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Google Sheets: {e}")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫–∞
try:
    y = yadisk.YaDisk(token=YANDEX_DISK_TOKEN)
    if not y.exists(YANDEX_DISK_FOLDER):
        y.mkdir(YANDEX_DISK_FOLDER)
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫—É: {e}")
    sys.exit(1)

def upload_to_yadisk(local_path, remote_path):
    try:
        full_remote_path = f"{YANDEX_DISK_FOLDER}/{remote_path}"
        y.upload(local_path, full_remote_path)
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {e}")
        return False

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è PDF
try:
    pdfmetrics.registerFont(TTFont('Arial', 'Arial.ttf'))
except:
    logger.warning("Arial font not found, using default")

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ –¥–∞–Ω–Ω—ã—Ö
user_states = {}
application_data = {}
user_chat_ids = {}

class Application:
    def __init__(self):
        self.device_type = None
        self.device_model = None
        self.problem = None
        self.comment = None
        self.name = None
        self.phone = None
        self.photo = None
        self.id = None
        self.chat_id = None
        self.date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.status = '–ù–æ–≤–∞—è'

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def create_main_menu():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add('üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', 'üìä –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å')
    kb.add('üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º', 'üì¢ –ù–∞—à Telegram-–∫–∞–Ω–∞–ª')
    return kb

@bot.message_handler(commands=['start'])
def send_welcome(message):
    try:
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RoboFix! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é
@bot.message_handler(func=lambda m: m.text in ['üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', 'üìä –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å', 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º', 'üì¢ –ù–∞—à Telegram-–∫–∞–Ω–∞–ª'])
def handle_menu(message):
    try:
        if message.text == 'üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É': 
            start_application(message)
        elif message.text == 'üìä –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å': 
            check_status(message)
        elif message.text == 'üìû –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–∞—Å—Ç–µ—Ä–æ–º': 
            contact_master(message)
        else: 
            show_channel(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_menu: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ù–∞—á–∞–ª–æ –∑–∞—è–≤–∫–∏
def start_application(message):
    try:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add('üîô –ù–∞–∑–∞–¥')
        
        application_data[message.chat.id] = Application()
        application_data[message.chat.id].chat_id = message.chat.id
        user_states[message.chat.id] = 'device_type'
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_application: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=create_main_menu())

@bot.message_handler(func=lambda m: user_states.get(m.chat.id)=='device_type')
def handle_device_type(message):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_main_menu())
        user_states.pop(message.chat.id, None)
        return
    try:
        application_data[message.chat.id].device_type = message.text
        user_states[message.chat.id] = 'device_model'
        bot.send_message(message.chat.id, '–£–∫–∞–∂–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_device_type: {e}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id)=='device_model')
def handle_device_model(message):
    try:
        application_data[message.chat.id].device_model = message.text
        user_states[message.chat.id] = 'problem'
        bot.send_message(message.chat.id, '–û–ø–∏—à–∏—Ç–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å:')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_device_model: {e}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id)=='problem')
def handle_problem(message):
    try:
        application_data[message.chat.id].problem = message.text
        user_states[message.chat.id] = 'comment'
        bot.send_message(message.chat.id, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–∏–ª–∏ \'-\' –µ—Å–ª–∏ –Ω–µ—Ç):')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_problem: {e}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id)=='comment')
def handle_comment(message):
    try:
        application_data[message.chat.id].comment = '' if message.text=='-' else message.text
        user_states[message.chat.id] = 'name'
        bot.send_message(message.chat.id, '–í–∞—à–µ –∏–º—è:')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_comment: {e}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id)=='name')
def handle_name(message):
    try:
        application_data[message.chat.id].name = message.text
        user_states[message.chat.id] = 'phone'
        bot.send_message(message.chat.id, '–¢–µ–ª–µ—Ñ–æ–Ω (+7XXXXXXXXXX):')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_name: {e}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id)=='phone')
def handle_phone(message):
    try:
        if not re.match(r'^\+7\d{10}$', message.text):
            return bot.send_message(message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ +7XXXXXXXXXX')
        application_data[message.chat.id].phone = message.text
        user_states[message.chat.id] = 'photo'
        bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–ª–∏ /skip:')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_phone: {e}")

@bot.message_handler(commands=['skip'], func=lambda m: user_states.get(m.chat.id)=='photo')
def skip_photo(message):
    try:
        user_states[message.chat.id] = 'preview'
        show_preview(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ skip_photo: {e}")

@bot.message_handler(content_types=['photo'], func=lambda m: user_states.get(m.chat.id)=='photo')
def handle_photo(message):
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded = bot.download_file(file_info.file_path)
        path = f"photos/{message.chat.id}_{datetime.now().strftime('%Y%m%d%H%M%S')}.jpg"
        os.makedirs(os.path.dirname(path), exist_ok=True)
        with open(path,'wb') as f: 
            f.write(downloaded)
        application_data[message.chat.id].photo = path
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
        remote_path = f"photos/{os.path.basename(path)}"
        if upload_to_yadisk(path, remote_path):
            logger.info(f"–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {remote_path}")
        
        user_states[message.chat.id] = 'preview'
        show_preview(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_photo: {e}")
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip")

# –ü—Ä–µ–≤—å—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
def show_preview(message):
    try:
        app = application_data[message.chat.id]
        text = (
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:\n"
            f"üîå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {app.device_type}\n"
            f"‚ÑπÔ∏è –ú–æ–¥–µ–ª—å: {app.device_model}\n"
            f"‚öôÔ∏è –ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å: {app.problem}\n"
            f"üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {app.comment or '-'}\n"
            f"üë§ –ò–º—è: {app.name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app.phone}\n"
            f"üìÖ –î–∞—Ç–∞: {app.date}\n"
            f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É? (–¥–∞/–Ω–µ—Ç)"
        )
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add('–¥–∞','–Ω–µ—Ç')
        
        if app.photo:
            with open(app.photo,'rb') as photo:
                bot.send_photo(message.chat.id, photo, caption=text, reply_markup=kb)
        else:
            bot.send_message(message.chat.id, text, reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_preview: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=create_main_menu())

@bot.message_handler(func=lambda m: user_states.get(m.chat.id)=='preview' and m.text.lower() in ['–¥–∞','–Ω–µ—Ç'])
def handle_preview_confirm(message):
    try:
        if message.text.lower()=='–Ω–µ—Ç':
            bot.send_message(message.chat.id, '–û—Ç–º–µ–Ω–∞.', reply_markup=create_main_menu())
            user_states.pop(message.chat.id, None)
            return
        
        app = application_data[message.chat.id]
        
        try:
            vals = sheet.get_all_values()
            if len(vals) > 1:
                last_id = vals[-1][0].strip()
                app.id = int(last_id) + 1 if last_id else 1
            else:
                app.id = 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID: {e}")
            app.id = 1
        
        user_chat_ids[app.id] = app.chat_id
        
        row = [
            app.id, app.date, app.name, app.phone,
            app.device_type, app.device_model, app.problem,
            app.comment or '-', app.photo or '', app.status, '', '', ''
        ]
        
        try:
            sheet.append_row(row)
            send_to_master(app)
            bot.send_message(
                app.chat_id, 
                '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\n'
                'üì≤ –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–∞—Å—Ç–µ—Ä–æ–º –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ:\n'
                'üõµ –ü–µ—Ä–µ–¥–∞–π—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–∞—Å—Ç–µ—Ä—É, –æ–Ω –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∑–∞—è–≤–∫—É\n'
                'üìÑ –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏—é –æ –ø—Ä–∏—ë–º–µ –ø–æ—Å–ª–µ –æ—Å–º–æ—Ç—Ä–∞', 
                reply_markup=create_main_menu()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Google Sheets: {e}")
            bot.send_message(
                app.chat_id,
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=create_main_menu()
            )
        
        user_states.pop(message.chat.id, None)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_preview_confirm: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏.", reply_markup=create_main_menu())

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É –∏ —Å—Ç–∏–∫–µ—Ä
def send_to_master(app):
    try:
        kb = types.InlineKeyboardMarkup()
        kb.add(
            types.InlineKeyboardButton('‚úÖ –ü—Ä–∏–Ω—è—Ç—å', callback_data=f'accept_{app.id}'),
            types.InlineKeyboardButton('‚ùå –û—Ç–∫–∞–∑–∞—Ç—å', callback_data=f'reject_{app.id}')
        )
        msg = (
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{app.id}\n"
            f"üîå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {app.device_type}\n"
            f"‚öôÔ∏è –ü—Ä–æ–±–ª–µ–º–∞: {app.problem}\n"
            f"üë§ –ò–º—è: {app.name}\n"
            f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {app.phone}"
        )

        if app.photo:
            with open(app.photo,'rb') as photo:
                bot.send_photo(MASTER_ID, photo, caption=msg, reply_markup=kb)
        else:
            bot.send_message(MASTER_ID, msg, reply_markup=kb)
        
        sticker_path = generate_sticker_pdf(app)
        with open(sticker_path,'rb') as sticker:
            bot.send_document(MASTER_ID, sticker, caption=f"–°—Ç–∏–∫–µ—Ä #{app.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_to_master: {e}")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∏–∫–µ—Ä–∞ –≤ PDF
def generate_sticker_pdf(app):
    try:
        width_mm, height_mm = 40, 30
        dpi = 300
        
        mm_to_px = dpi / 25.4
        width_px = int(width_mm * mm_to_px)
        height_px = int(height_mm * mm_to_px)

        img = Image.new('RGB', (width_px, height_px), 'white')
        draw = ImageDraw.Draw(img)

        font_size_mm = 2.2
        font_size_px = int(font_size_mm * mm_to_px)
        try:
            font = ImageFont.truetype('arial.ttf', font_size_px)
        except:
            font = ImageFont.load_default()
            font.size = font_size_px

        date_str = datetime.now().strftime("%d-%m")
        lines = [
            f"ID: {app.id}",
            f"–î–∞—Ç–∞: {date_str}",
            f"–ö–ª–∏–µ–Ω—Ç: {app.name[:14]}" if len(app.name) > 14 else f"–ö–ª–∏–µ–Ω—Ç: {app.name}",
            f"–¢–µ–ª: {app.phone}",
            f"–ü—Ä–æ–±–ª: {app.problem[:20] + '...' if len(app.problem) > 20 else app.problem}"
        ]

        text_margin_mm = 2.3
        text_margin_px = int(text_margin_mm * mm_to_px)
        line_spacing_mm = 4.5
        line_spacing_px = int(line_spacing_mm * mm_to_px)
        
        y_position = text_margin_px
        for line in lines:
            draw.text((text_margin_px, y_position), line, font=font, fill='black')
            y_position += line_spacing_px

        qr_size_mm = 16
        qr_size_px = int(qr_size_mm * mm_to_px)
        
        qr = qrcode.QRCode(
            version=3,
            error_correction=qrcode.constants.ERROR_CORRECT_H,
            box_size=4,
            border=1
        )
        qr.add_data(SPREADSHEET_URL)
        qr.make(fit=True)
        
        qr_img = qr.make_image(fill_color="black", back_color="white")
        qr_img = qr_img.resize((qr_size_px, qr_size_px))

        qr_margin_mm = 2
        qr_margin_px = int(qr_margin_mm * mm_to_px)
        qr_x = width_px - qr_size_px - qr_margin_px
        qr_y = qr_margin_px
        
        img.paste(qr_img, (qr_x, qr_y))

        pdf_path = f"stickers/—Å—Ç–∏–∫–µ—Ä ({app.id}).pdf"
        os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
        
        from reportlab.lib.pagesizes import mm
        c = canvas.Canvas(pdf_path, pagesize=(width_mm*mm, height_mm*mm))
        
        img_io = BytesIO()
        img.save(img_io, format='PNG', dpi=(dpi, dpi))
        img_io.seek(0)
        
        c.drawImage(ImageReader(img_io), 0, 0, width_mm*mm, height_mm*mm)
        c.save()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–∫–µ—Ä–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
        remote_path = f"stickers/{os.path.basename(pdf_path)}"
        if upload_to_yadisk(pdf_path, remote_path):
            logger.info(f"–°—Ç–∏–∫–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {remote_path}")
        
        return pdf_path

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {str(e)}")
        raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Ç–∏–∫–µ—Ä")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–∞—Å—Ç–µ—Ä–∞
@bot.callback_query_handler(func=lambda c: c.data.startswith(('accept_','reject_')))
def handle_master_action(call):
    try:
        action, sid = call.data.split('_')
        aid = int(sid)
        
        try:
            cell = sheet.find(str(aid))
            row = cell.row
        except Exception as e:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{aid}: {e}")
            bot.answer_callback_query(call.id, "–ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        if action == 'accept':
            try:
                sheet.update_cell(row, 10, '–ü—Ä–∏–Ω—è—Ç–æ')
                
                pdf_filename = f"–ö–≤–∏—Ç–∞–Ω—Ü–∏—è_‚Ññ{aid}.pdf"
                pdf_path = f"pdf_receipts/{pdf_filename}"
                os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
                create_pdf(aid, pdf_path)
                
                # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫
                remote_path = f"pdf_receipts/{pdf_filename}"
                if upload_to_yadisk(pdf_path, remote_path):
                    logger.info(f"–ö–≤–∏—Ç–∞–Ω—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ –Ø–Ω–¥–µ–∫—Å.–î–∏—Å–∫: {remote_path}")
                
                message_text = (
                    f"‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!\n"
                    f"üìÑ –í–æ—Ç –∫–≤–∏—Ç–∞–Ω—Ü–∏—è –æ –ø—Ä–∏–µ–º–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ä–µ–º–æ–Ω—Ç.\n"
                    f"üÜî –ù–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏: {aid}\n\n"
                    f"–ü–æ—Å–ª–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –º–∞—Å—Ç–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–µ–º–æ–Ω—Ç–∞."
                )
                
                if aid in user_chat_ids:
                    with open(pdf_path, 'rb') as f:
                        bot.send_document(
                            user_chat_ids[aid],
                            (pdf_filename, f),
                            caption=message_text
                        )
                
                bot.answer_callback_query(call.id, '‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞')
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞—è–≤–∫–∏: {e}")
                bot.answer_callback_query(call.id, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ')
                
        else:
            sheet.update_cell(row, 10, '–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
            if aid in user_chat_ids:
                bot.send_message(
                    user_chat_ids[aid],
                    f"‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ ‚Ññ{aid} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.\n\n"
                    f"–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –º–∞—Å—Ç–µ—Ä—É."
                )
            bot.answer_callback_query(call.id, '‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_master_action: {e}")
        bot.answer_callback_query(call.id, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ')

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏
def create_pdf(aid, output_path):
    try:
        cell = sheet.find(str(aid))
        data = sheet.row_values(cell.row)
        
        c = canvas.Canvas(output_path, pagesize=A4)
        
        try:
            c.setFont('Arial', 12)
        except:
            c.setFont('Helvetica', 12)
        
        date_parts = data[1].split()[0].split('-')
        formatted_date = f"{date_parts[2]}-{date_parts[1]}-{date_parts[0]}"
        
        c.drawString(50, 800, f"–ö–≤–∏—Ç–∞–Ω—Ü–∏—è ‚Ññ{aid}")
        labels = ['–ò–º—è','–¢–µ–ª–µ—Ñ–æ–Ω','–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ','–ú–æ–¥–µ–ª—å','–ù–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç—å','–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π','–î–∞—Ç–∞']
        keys = [2,3,4,5,6,7,1]
        
        y = 770
        for lbl, idx in zip(labels, keys):
            value = data[idx] if idx < len(data) else ''
            if lbl == '–î–∞—Ç–∞':
                value = formatted_date
            c.drawString(50, y, f"{lbl}: {value}")
            y -= 20
        
        c.drawString(50, y, "–°—Ä–æ–∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏: 1-3 –¥–Ω—è")
        y -= 30
        c.drawString(50, y, "–°–ø–∞—Å–∏–±–æ —á—Ç–æ –æ–±—Ä–∞—Ç–∏–ª–∏—Å—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å")
        c.save()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF: {e}")
        raise

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∫–ª–∏–µ–Ω—Ç–æ–º
@bot.message_handler(func=lambda m: m.text=='üìä –£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å')
def check_status(message):
    try:
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add('üîô –ù–∞–∑–∞–¥')
        user_states[message.chat.id] = 'check'
        bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ ID –∑–∞—è–≤–∫–∏:', reply_markup=kb)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_status: {e}")

@bot.message_handler(func=lambda m: user_states.get(m.chat.id)=='check')
def handle_check(message):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=create_main_menu())
        user_states.pop(message.chat.id, None)
        return
    try:
        aid = int(message.text)
        try:
            cell = sheet.find(str(aid))
            row = cell.row
            status = sheet.cell(row,10).value
            cost = sheet.cell(row,11).value
            icons = {'–ù–æ–≤–∞—è':'üü°','–ü—Ä–∏–Ω—è—Ç–æ':'üü°','–í —Ä–∞–±–æ—Ç–µ':'üü†','–ì–æ—Ç–æ–≤–æ':'üü¢','–û—Ç–∫–ª–æ–Ω–µ–Ω–æ':'üî¥'}
            text = f"{icons.get(status, '')}{status}"
            if status=='–ì–æ—Ç–æ–≤–æ' and cost and cost!='':
                text += f"\n–ö –æ–ø–ª–∞—Ç–µ: {cost} —Ä—É–±. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–∞—Å—Ç–µ—Ä–æ–º."
            bot.send_message(message.chat.id, text, reply_markup=create_main_menu())
        except:
            bot.send_message(message.chat.id, 'ID –Ω–µ –Ω–∞–π–¥–µ–Ω.', reply_markup=create_main_menu())
    except ValueError:
        bot.send_message(message.chat.id, 'ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "üîô –ù–∞–∑–∞–¥"')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_check: {e}")
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', reply_markup=create_main_menu())
    finally:
        user_states.pop(message.chat.id, None)

# –ö–æ–Ω—Ç–∞–∫—Ç—ã –º–∞—Å—Ç–µ—Ä–∞
def contact_master(message):
    try:
        formatted_phone = format_phone(MASTER_PHONE)
        whatsapp_link = f"https://wa.me/{MASTER_PHONE[1:]}"
        
        kb = types.InlineKeyboardMarkup()
        kb.row(
            types.InlineKeyboardButton(
                "üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å", 
                callback_data=f'call_{MASTER_PHONE}'
            )
        )
        kb.row(
            types.InlineKeyboardButton(
                "‚úâÔ∏è Telegram", 
                url=f'tg://user?id={MASTER_ID}'
            ),
            types.InlineKeyboardButton(
                "üí¨ WhatsApp", 
                url=whatsapp_link
            )
        )
        
        contact_text = (
            "‚åõ –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –ü–Ω-–°–± 10:00-20:00"
        )
        
        bot.send_message(
            message.chat.id,
            contact_text,
            reply_markup=kb
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ contact_master: {e}")
        bot.send_message(
            message.chat.id,
            "–°–≤—è–∑—å —Å –º–∞—Å—Ç–µ—Ä–æ–º: @username_–º–∞—Å—Ç–µ—Ä–∞",
            reply_markup=create_main_menu()
        )

def format_phone(phone):
    if not phone or len(phone) != 12 or not phone.startswith('+7'):
        return phone
    return f"{phone[:2]} ({phone[2:5]}) {phone[5:8]}-{phone[8:10]}-{phone[10:]}"

@bot.callback_query_handler(func=lambda call: call.data.startswith('call_'))
def handle_call(call):
    try:
        phone = call.data.split('_')[1]
        formatted_phone = format_phone(phone)
        bot.answer_callback_query(
            call.id,
            f"–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—Å—Ç–µ—Ä–∞: {formatted_phone}",
            show_alert=True
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_call: {e}")
        bot.answer_callback_query(
            call.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –Ω–æ–º–µ—Ä",
            show_alert=True
        )

def show_channel(message):
    bot.send_message(message.chat.id, "–ù–∞—à –∫–∞–Ω–∞–ª: t.me/robotfixservice")

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞
@bot.message_handler(commands=['setstatus'])
def set_status(message):
    if message.from_user.id != MASTER_ID: 
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 2: 
            return bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /setstatus [ID]')
        
        aid = int(parts[1])
        user_states[message.chat.id] = f'set_{aid}'
        
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add('–ü—Ä–∏–Ω—è—Ç–æ','–í —Ä–∞–±–æ—Ç–µ','–ì–æ—Ç–æ–≤–æ','–í—ã–¥–∞–Ω–æ','–û—Ç–∫–ª–æ–Ω–µ–Ω–æ')
        
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å:', reply_markup=kb)
    except ValueError:
        bot.send_message(message.chat.id, 'ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_status: {e}")
        bot.send_message(message.chat.id, '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')

@bot.message_handler(func=lambda m: isinstance(user_states.get(m.chat.id), str) and user_states[m.chat.id].startswith('set_'))
def handle_set_status(message):
    if message.from_user.id != MASTER_ID: 
        user_states.pop(message.chat.id, None)
        return
    
    try:
        aid = int(user_states[message.chat.id].split('_')[1])
        new_status = message.text
        
        try:
            cell = sheet.find(str(aid))
            row = cell.row
            sheet.update_cell(row, 10, new_status)
            
            bot.send_message(
                message.chat.id, 
                f"#{aid} => {new_status}", 
                reply_markup=create_main_menu()
            )
            
            if new_status == '–ì–æ—Ç–æ–≤–æ' and aid in user_chat_ids:
                cost = sheet.cell(row, 11).value
                note = 'üü¢ –í–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≥–æ—Ç–æ–≤–æ.'
                if cost and cost != '': 
                    note += f"\n–ö –æ–ø–ª–∞—Ç–µ: {cost} —Ä—É–±. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–∞—Å—Ç–µ—Ä–æ–º —á—Ç–æ–± –∑–∞–±—Ä–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."
                bot.send_message(user_chat_ids[aid], note)
                
        except Exception as e:
            logger.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞—è–≤–∫–∞ #{aid}: {e}")
            bot.send_message(
                message.chat.id,
                f"–ó–∞—è–≤–∫–∞ #{aid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
                reply_markup=create_main_menu()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_set_status: {e}")
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞",
            reply_markup=create_main_menu()
        )
    finally:
        user_states.pop(message.chat.id, None)

@bot.message_handler(commands=['mystat'])
def mystat(message):
    if message.from_user.id != MASTER_ID: 
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞
        kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.row('üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
        kb.row('üìÖ –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', 'üìÖ –ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü')
        kb.row('üìÜ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è', 'üîô –ù–∞–∑–∞–¥')
        
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:",
            reply_markup=kb
        )
        user_states[message.chat.id] = 'stat_period'
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ mystat: {e}")
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", reply_markup=create_main_menu())

@bot.message_handler(func=lambda m: user_states.get(m.chat.id) == 'stat_period')
def handle_stat_period(message):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, "–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=create_main_menu())
        user_states.pop(message.chat.id, None)
        return
    
    try:
        records = sheet.get_all_records()
        
        if message.text == 'üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_stats = {}
            total_cost = 0
            completed_cost = 0
            cost_values = []
            
            for r in records:
                status = r.get('–°—Ç–∞—Ç—É—Å', '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞')
                status_stats[status] = status_stats.get(status, 0) + 1
                
                # –°—á–∏—Ç–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (–±–µ—Ä–µ–º 11-—é –∫–æ–ª–æ–Ω–∫—É, –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0)
                cost_str = str(r.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', '0')).strip()
                if cost_str.isdigit():
                    cost = int(cost_str)
                    total_cost += cost
                    cost_values.append(cost)
                    if status == '–ì–æ—Ç–æ–≤–æ':
                        completed_cost += cost
            
            avg_cost = round(total_cost/len(records)) if len(records) > 0 else 0
            if cost_values:
                avg_cost = round(sum(cost_values)/len(cost_values))
            
            text = (
                "üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(records)}\n"
                "\nüìå –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
            )
            text += '\n'.join(f"{k}: {v}" for k, v in sorted(status_stats.items()))
            
            text += (
                f"\n\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫: {total_cost} —Ä—É–±.\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫: {completed_cost} —Ä—É–±.\n"
                f"üíµ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞—è–≤–∫–∏: {avg_cost} —Ä—É–±."
            )
            
        elif message.text in ['üìÖ –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', 'üìÖ –ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü', 'üìÜ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è']:
            now = datetime.now()
            
            if message.text == 'üìÖ –ó–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü':
                month_records = [
                    r for r in records 
                    if parse_date(r.get('–î–∞—Ç–∞', '')).month == now.month
                    and parse_date(r.get('–î–∞—Ç–∞', '')).year == now.year
                ]
                text = generate_monthly_report(month_records, now.month, now.year)
                
            elif message.text == 'üìÖ –ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü':
                last_month = now.month - 1 if now.month > 1 else 12
                last_year = now.year if now.month > 1 else now.year - 1
                month_records = [
                    r for r in records 
                    if parse_date(r.get('–î–∞—Ç–∞', '')).month == last_month
                    and parse_date(r.get('–î–∞—Ç–∞', '')).year == last_year
                ]
                text = generate_monthly_report(month_records, last_month, last_year)
                
            elif message.text == 'üìÜ –ó–∞ –≤—Å–µ –≤—Ä–µ–º—è':
                text = generate_full_report(records)
                
        else:
            return
            
        bot.send_message(
            message.chat.id,
            text,
            reply_markup=create_main_menu()
        )
        user_states.pop(message.chat.id, None)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_stat_period: {str(e)}", exc_info=True)
        bot.send_message(
            message.chat.id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã.",
            reply_markup=create_main_menu()
        )
        user_states.pop(message.chat.id, None)

def parse_date(date_str):
    """–ü–∞—Ä—Å–∏—Ç –¥–∞—Ç—É –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç datetime"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç—ã
        for fmt in ("%Y-%m-%d %H:%M:%S", "%d.%m.%Y %H:%M", "%Y-%m-%d"):
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue
        return datetime.min  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–∞—Ç—É –µ—Å–ª–∏ –Ω–µ —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–æ—Å—å
    except:
        return datetime.min

def generate_monthly_report(records, month, year):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –º–µ—Å—è—Ü"""
    if not records:
        month_names = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                     '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
        return f"üìÖ –ó–∞ {month_names[month-1]} {year} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
    
    status_stats = {}
    total_cost = 0
    completed_cost = 0
    cost_values = []
    
    for r in records:
        status = r.get('–°—Ç–∞—Ç—É—Å', '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞')
        status_stats[status] = status_stats.get(status, 0) + 1
        
        cost_str = str(r.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', '0')).strip()
        if cost_str.isdigit():
            cost = int(cost_str)
            total_cost += cost
            cost_values.append(cost)
            if status == '–ì–æ—Ç–æ–≤–æ':
                completed_cost += cost
    
    avg_cost = round(total_cost/len(records)) if len(records) > 0 else 0
    if cost_values:
        avg_cost = round(sum(cost_values)/len(cost_values))
    
    month_names = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                 '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å']
    
    completed = status_stats.get('–ì–æ—Ç–æ–≤–æ', 0)
    completion_rate = round(completed/len(records)*100) if len(records) > 0 else 0
    
    text = (
        f"üìÖ –û—Ç—á–µ—Ç –∑–∞ {month_names[month-1]} {year}:\n"
        f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(records)}\n"
        "\nüìå –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
    )
    text += '\n'.join(f"{k}: {v}" for k, v in sorted(status_stats.items()))
    
    text += (
        f"\n\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±.\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {completed_cost} —Ä—É–±.\n"
        f"üíµ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {avg_cost} —Ä—É–±.\n"
        f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed} –∏–∑ {len(records)} ({completion_rate}%)"
    )
    
    return text

def generate_full_report(records):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"""
    if not records:
        return "üìÜ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"
    
    status_stats = {}
    monthly_stats = {}
    total_cost = 0
    completed_cost = 0
    cost_values = []
    
    for r in records:
        status = r.get('–°—Ç–∞—Ç—É—Å', '–ù–µ—Ç —Å—Ç–∞—Ç—É—Å–∞')
        status_stats[status] = status_stats.get(status, 0) + 1
        
        date = parse_date(r.get('–î–∞—Ç–∞', ''))
        month_key = f"{date.year}-{date.month:02d}"
        monthly_stats[month_key] = monthly_stats.get(month_key, 0) + 1
        
        cost_str = str(r.get('–°—Ç–æ–∏–º–æ—Å—Ç—å', '0')).strip()
        if cost_str.isdigit():
            cost = int(cost_str)
            total_cost += cost
            cost_values.append(cost)
            if status == '–ì–æ—Ç–æ–≤–æ':
                completed_cost += cost
    
    avg_cost = round(total_cost/len(records)) if len(records) > 0 else 0
    if cost_values:
        avg_cost = round(sum(cost_values)/len(cost_values))
    
    completed = status_stats.get('–ì–æ—Ç–æ–≤–æ', 0)
    completion_rate = round(completed/len(records)*100) if len(records) > 0 else 0
    
    text = (
        "üìÜ –ü–æ–ª–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
        f"–í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: {len(records)}\n"
        "\nüìå –ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:\n"
    )
    text += '\n'.join(f"{k}: {v}" for k, v in sorted(status_stats.items()))
    
    text += "\n\nüìÖ –ü–æ –º–µ—Å—è—Ü–∞–º:\n"
    for month in sorted(monthly_stats.keys()):
        year, month_num = map(int, month.split('-'))
        month_names = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω',
                      '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫']
        text += f"{month_names[month_num-1]} {year}: {monthly_stats[month]}\n"
    
    text += (
        f"\nüí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} —Ä—É–±.\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö: {completed_cost} —Ä—É–±.\n"
        f"üíµ –°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {avg_cost} —Ä—É–±.\n"
        f"üìà –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed} –∏–∑ {len(records)} ({completion_rate}%)"
    )
    
    return text

@bot.message_handler(commands=['money'])
def set_money(message):
    if message.from_user.id != MASTER_ID: 
        return
    
    try:
        parts = message.text.split()
        if len(parts) < 3: 
            return bot.send_message(message.chat.id, '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /money [ID] [—Å—Ç–æ–∏–º–æ—Å—Ç—å]')
        
        aid = int(parts[1])
        cost = parts[2]
        
        try:
            cell = sheet.find(str(aid))
            row = cell.row
            sheet.update_cell(row, 11, cost)
            bot.send_message(message.chat.id, f"–°—Ç–æ–∏–º–æ—Å—Ç—å #{aid} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {cost}")
        except:
            bot.send_message(message.chat.id, f"–ó–∞—è–≤–∫–∞ #{aid} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            
    except ValueError:
        bot.send_message(message.chat.id, 'ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_money: {e}")
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –§–æ–ª–ª–±—ç–∫
@bot.message_handler(func=lambda _: True)
def fallback(message):
    bot.send_message(message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=create_main_menu())

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
for d in ['photos','stickers', 'pdf_receipts']:
    os.makedirs(d, exist_ok=True)

# –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    logger.info('Bot starting...')
    try:
        bot.infinity_polling()
    except Exception as e:
        logger.error(f"Bot stopped with error: {e}")
        sys.exit(1)